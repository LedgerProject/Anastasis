# This file is in the public domain.
#
[PATHS]
# Persistent data storage for the testcase
TALER_TEST_HOME = test_anastasis_api_home/
TALER_RUNTIME_DIR = ${TMPDIR:-${TMP:-/tmp}}/${USER:-}/taler-system-runtime/

# Persistent data storage
TALER_DATA_HOME = $TALER_TEST_HOME/.local/share/taler/

# Configuration files
TALER_CONFIG_HOME = $TALER_TEST_HOME/.config/taler/

# Cached data, no big deal if lost
TALER_CACHE_HOME = $TALER_TEST_HOME/.cache/taler/

[taler]
# What currency do we use?
#currency = EUR
currency = EUR
#CURRENCY_ROUND_UNIT = EUR:0.01
#CURRENCY_ROUND_UNIT = EUR:0.01

[taler-helper-crypto-rsa]
# Reduce from 1 year to speed up test
LOOKAHEAD_SIGN = 12 days

[taler-helper-crypto-eddsa]
# Reduce from 1 year to speed up test
LOOKAHEAD_SIGN = 12 days
# Reduce from 12 weeks to ensure we have multiple
DURATION = 7 days


[bank]
HTTP_PORT = 8082
#BASE_URL = https://bank.test.taler.net/

##########################################
# Configuration for Anastasis #
##########################################

[anastasis]
PORT = 8086

DB = postgres

BUSINESS_NAME = "Checker's Test Inc."

# Upload limit
UPLOAD_LIMIT_MB = 1

ANNUAL_POLICY_UPLOAD_LIMIT = 64

INSURANCE = EUR:0

SERVER_SALT = salty


# Annual fee we charge.
#ANNUAL_FEE = EUR:4.99
ANNUAL_FEE = EUR:4.99

TRUTH_UPLOAD_FEE = EUR:0.0

# Base URL of anastasis.
# BASE_URL = http://localhost:8086/

[anastasis-merchant-backend]
# Where does our payment backend run?  Must match PORT under [merchant]
PAYMENT_BACKEND_URL = http://localhost:8080/

# Authentication costs
[authorization-question]
# Cost of authentication by question
COST = EUR:0

[authorization-file]
# Cost of authentication by file (only for testing purposes)
COST = EUR:1

[authorization-email]
# Cost of authentication by E-Mail
COST = EUR:0

[authorization-sms]
# Cost of authentication by SMS
COST = EUR:0

# Command which is executed for the sms authentication
COMMAND = ./sms_authentication.sh




# This specifies which database the postgres backend uses.
[stasis-postgres]
CONFIG = postgres:///anastasischeck

##########################################
# Configuration for the merchant backend #
##########################################

[merchant]

# Which port do we run the backend on? (HTTP server)
PORT = 8080

# How quickly do we want the exchange to send us our money?
# Used only if the frontend does not specify a value.
WIRE_TRANSFER_DELAY = 0 s

# Which plugin (backend) do we use for the DB.
DB = postgres

# Default choice for maximum wire fee.
DEFAULT_MAX_WIRE_FEE = EUR:0.10

# Default choice for maximum deposit fee.
DEFAULT_MAX_DEPOSIT_FEE = EUR:0.10


# This specifies which database the postgres backend uses.
[merchantdb-postgres]
CONFIG = postgres:///talercheck

# Sections starting with "exchange-" specify trusted exchanges
# (by the merchant)
[merchant-exchange-default]
MASTER_KEY = T1VVFQZZARQ1CMF4BN58EE7SKTW5AV2BS18S87ZEGYS4S29J6DNG
EXCHANGE_BASE_URL = http://localhost:8081/
#MASTER_KEY = DY95EXAHQ2BKM2WK9YHZHYG1R7PPMMJPY14FNGP662DAKE35AKQG
#EXCHANGE_BASE_URL = https://exchange.test.taler.net/
#CURRENCY = EUR
CURRENCY = EUR

# only fixes skips.
[auditor]
BASE_URL = http://the.auditor/
#BASE_URL = https://auditor.test.taler.net/
#AUDITOR_KEY = DSDASDXAMDAARMNAD53ZA4AFAHA2QADAMAHHASWDAWXN84SDAA11
# If currency does not match [TALER] section, the auditor
# will be ignored!
CURRENCY = EUR

# Where do we store the auditor's private key?
AUDITOR_PRIV_FILE = ${TALER_DATA_HOME}/auditor/offline-keys/auditor.priv

# Auditors must be in sections "auditor-", the rest of the section
# name could be anything.
[auditor-ezb]
# Informal name of the auditor. Just for the user.
NAME = European Central Bank

# URL of the auditor (especially for in the future, when the
# auditor offers an automated issue reporting system).
# Not really used today.
URL = http://taler.ezb.eu/

# This is the important bit: the signing key of the auditor.
PUBLIC_KEY = 9QXF7XY7E9VPV47B5Z806NDFSX2VJ79SVHHD29QEQ3BG31ANHZ60

# Which currency is this auditor trusted for?
CURRENCY = EUR


###################################################
# Configuration for the exchange for the testcase #
###################################################

[exchange]
# How to access our database
DB = postgres

# HTTP port the exchange listens to
PORT = 8081

# how long are the signatures with the signkey valid?
SIGNKEY_LEGAL_DURATION = 2 years

# Our public key
MASTER_PUBLIC_KEY = T1VVFQZZARQ1CMF4BN58EE7SKTW5AV2BS18S87ZEGYS4S29J6DNG

# Base URL of the exchange.
BASE_URL = "http://localhost:8081/"
#BASE_URL = https://exchange.test.taler.net/

# Network configuration for the normal API/service HTTP server
# serve via tcp socket (on PORT)
SERVE = tcp

[exchange-offline]

# Where do we store the offline master private key of the exchange?
MASTER_PRIV_FILE = ${TALER_DATA_HOME}/exchange/offline-keys/master.priv

# Where do we store the TOFU key material?
SECM_TOFU_FILE = ${TALER_DATA_HOME}/exchange/offline-keys/secm_tofus.pub


[taler-exchange-secmod-eddsa]
# Where do we store the generated private keys.
KEY_DIR = ${TALER_DATA_HOME}/exchange-secmod-eddsa/keys

[taler-exchange-secmod-rsa]
# Where do we store the generated private keys.
KEY_DIR = ${TALER_DATA_HOME}/exchange-secmod-rsa/keys


[exchangedb-postgres]
CONFIG = "postgres:///talercheck"

[auditordb-postgres]
CONFIG = "postgres:///talercheck"

# Account of the EXCHANGE
[exchange-account-exchange]
# What is the exchange's bank account (with the "Taler Bank" demo system)?
PAYTO_URI = "payto://x-taler-bank/localhost:8082/2"
ENABLE_DEBIT = YES
ENABLE_CREDIT = YES

[exchange-accountcredentials-exchange]
WIRE_GATEWAY_URL = "http://localhost:8082/2/"
WIRE_GATEWAY_AUTH_METHOD = NONE



[coin_eur_ct_1]
value = EUR:0.01
duration_withdraw = 7 days
duration_spend = 2 years
duration_legal = 3 years
fee_withdraw = EUR:0.00
fee_deposit = EUR:0.00
fee_refresh = EUR:0.01
fee_refund = EUR:0.01
rsa_keysize = 1024

[coin_eur_ct_10]
value = EUR:0.10
duration_withdraw = 7 days
duration_spend = 2 years
duration_legal = 3 years
fee_withdraw = EUR:0.01
fee_deposit = EUR:0.01
fee_refresh = EUR:0.03
fee_refund = EUR:0.01
rsa_keysize = 1024

[coin_eur_1]
value = EUR:1
duration_withdraw = 7 days
duration_spend = 2 years
duration_legal = 3 years
fee_withdraw = EUR:0.01
fee_deposit = EUR:0.01
fee_refresh = EUR:0.03
fee_refund = EUR:0.01
rsa_keysize = 1024

[coin_eur_5]
value = EUR:5
duration_withdraw = 7 days
duration_spend = 2 years
duration_legal = 3 years
fee_withdraw = EUR:0.01
fee_deposit = EUR:0.01
fee_refresh = EUR:0.03
fee_refund = EUR:0.01
rsa_keysize = 1024
